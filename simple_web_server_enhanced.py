#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Secure Messenger —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π keep-alive
"""

import http.server
import socketserver
import json
import os
import sys
import threading
import time
from datetime import datetime
import urllib.parse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from server import SecureMessengerServer
    from database import DatabaseManager
    from crypto_utils import CryptoUtils
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

class EnhancedHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å API –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self, *args, **kwargs):
        self.messenger_server = None
        super().__init__(*args, **kwargs)
    
    def set_messenger_server(self, server):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
        self.messenger_server = server
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.path = '/index.html'
            return super().do_GET()
        elif self.path == '/health':
            # Health check –¥–ª—è keep-alive
            self.send_health_response()
        elif self.path.startswith('/api/'):
            # API –∑–∞–ø—Ä–æ—Å—ã
            self.handle_api_request()
        else:
            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            return super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path.startswith('/api/'):
            self.handle_api_request()
        else:
            self.send_error(404, "Not Found")
    
    def send_health_response(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç health check –æ—Ç–≤–µ—Ç"""
        try:
            health_data = {
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "uptime": time.time() - self.server.start_time,
                "messenger_status": "running" if self.messenger_server else "stopped"
            }
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(health_data).encode())
            
        except Exception as e:
            self.send_error(500, f"Health check error: {e}")
    
    def handle_api_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å API
            api_path = self.path[5:]  # –£–±–∏—Ä–∞–µ–º '/api/'
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            if post_data:
                try:
                    request_data = json.loads(post_data.decode('utf-8'))
                except json.JSONDecodeError:
                    request_data = {}
            else:
                request_data = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response_data = self.process_api_request(api_path, request_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            self.wfile.write(json.dumps(response_data).encode())
            
        except Exception as e:
            print(f"API Error: {e}")
            error_response = {"success": False, "error": str(e)}
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(error_response).encode())
    
    def process_api_request(self, api_path, request_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã"""
        if not self.messenger_server:
            return {"success": False, "error": "Messenger server not available"}
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            class MockClient:
                def __init__(self, request_data):
                    self.request_data = request_data
                    self.response_data = {}
                
                def send(self, data):
                    self.response_data = data
                
                def recv(self, size):
                    return b''
            
            mock_client = MockClient(request_data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
            if api_path == 'login':
                return self.messenger_server.handle_login(request_data)
            elif api_path == 'register':
                return self.messenger_server.handle_register(request_data)
            elif api_path == 'get_chats':
                return self.messenger_server.handle_get_chats(request_data)
            elif api_path == 'get_messages':
                return self.messenger_server.handle_get_messages(request_data)
            elif api_path == 'send_message':
                return self.messenger_server.handle_send_message(request_data)
            elif api_path == 'create_chat':
                return self.messenger_server.handle_create_chat(request_data)
            elif api_path == 'find_user':
                return self.messenger_server.handle_find_user(request_data)
            elif api_path == 'create_secure_chat':
                return self.messenger_server.handle_create_secure_chat(request_data)
            elif api_path == 'join_secure_chat':
                return self.messenger_server.handle_join_secure_chat(request_data)
            elif api_path == 'send_secure_message':
                return self.messenger_server.handle_send_secure_message(request_data)
            elif api_path == 'get_secure_messages':
                return self.messenger_server.handle_get_secure_messages(request_data)
            else:
                return {"success": False, "error": f"Unknown API endpoint: {api_path}"}
                
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {format % args}")

class EnhancedWebServer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π keep-alive"""
    
    def __init__(self, port=8080):
        self.port = port
        self.messenger_server = None
        self.httpd = None
        self.keep_alive_thread = None
        self.running = False
    
    def start_messenger_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞...")
            self.messenger_server = SecureMessengerServer()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            messenger_thread = threading.Thread(
                target=self.messenger_server.start_server,
                daemon=True
            )
            messenger_thread.start()
            
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞: {e}")
            return False
    
    def start_keep_alive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def keep_alive_worker():
            while self.running:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –Ω–∞ —Å–µ–±—è
                    import requests
                    response = requests.get(f"http://localhost:{self.port}/health", timeout=5)
                    if response.status_code == 200:
                        print(f"üíì Keep-alive ping —É—Å–ø–µ—à–µ–Ω")
                    else:
                        print(f"‚ö†Ô∏è Keep-alive ping –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
                except Exception as e:
                    print(f"‚ùå Keep-alive –æ—à–∏–±–∫–∞: {e}")
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
                time.sleep(300)
        
        self.keep_alive_thread = threading.Thread(target=keep_alive_worker, daemon=True)
        self.keep_alive_thread.start()
        print("üíì Keep-alive –∑–∞–ø—É—â–µ–Ω")
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
            if not self.start_messenger_server():
                return False
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            handler = EnhancedHTTPRequestHandler
            self.httpd = socketserver.TCPServer(("", self.port), handler)
            self.httpd.start_time = time.time()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
            self.httpd.RequestHandlerClass.set_messenger_server = lambda self, server: setattr(self, 'messenger_server', server)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            for handler_instance in self.httpd.RequestHandlerClass.__dict__.values():
                if hasattr(handler_instance, 'set_messenger_server'):
                    handler_instance.set_messenger_server(self.messenger_server)
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
            self.start_keep_alive()
            
            print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{self.port}")
            print(f"üíì Health check: http://localhost:{self.port}/health")
            print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.httpd.serve_forever()
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self.stop_server()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        self.running = False
        
        if self.httpd:
            self.httpd.shutdown()
            self.httpd.server_close()
        
        if self.messenger_server:
            self.messenger_server.stop_server()
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê Secure Messenger - –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.getenv('PORT', 8080))
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = EnhancedWebServer(port)
    server.start_server()

if __name__ == "__main__":
    main()
